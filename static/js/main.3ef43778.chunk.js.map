{"version":3,"sources":["../../src/Cell.tsx","../../src/Row.tsx","../../src/XLabels.tsx","../../src/Column.tsx","../../src/YLabels.tsx","../../src/YLabelAligner.tsx","../../src/index.tsx","../../src/useElemetHeight.ts","App.tsx","index.tsx"],"names":["noop","returnVal","React","render","style","square","height","onClick","border","borderWidth","textAlign","color","ratio","overflow","boxSizing","flexGrow","flexBasis","flexShrink","lineHeight","borderRadius","fontSize","cursor","background","posX","posY","Row","reverse","display","flexDirection","XLabels","xLabelsStyle","widthPercent","labels","key","label","padding","width","index","Column","YLabels","yLabelsStyle","YLabelAligner","children","isXLabelReverse","xLabelHeight","HeatMapGrid","xLabelsPos","yLabelsPos","cellHeight","initHeight","eleRef","setEleHeight","eleHeight","useElemetHeight","data","flatArray","max","Math","getMinMax","minMaxDiff","isYLabelReverse","yLabels","ref","xLabelRef","xLabels","xi","rowItems","yi","value","cellRender","cellStyle","Array","fill","map","_","i","length","floor","random","App","x","y","title","textTransform","_x","_y","alert","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3ef43778.chunk.js","sourcesContent":["import React from 'react'\n\ninterface Props {\n  render?: (x: number, y: number, ratio: number) => {}\n  posX: number\n  posY: number\n  style?: (x: number, y: number, ratio: number) => {}\n  ratio: number\n  value: number\n  height?: string\n  square?: boolean\n  onClick?: (x: number, y: number) => void\n}\n\nconst noop = (returnVal: any) => () => returnVal\n\nconst Cell = ({\n  render = noop(null),\n  style = noop({}),\n  ratio,\n  posX,\n  posY,\n  square = false,\n  height = '2rem',\n  value,\n  onClick\n}: Props) => {\n  return (\n    <div\n      onClick={() => (onClick || noop({}))(posX, posY)}\n      style={{\n        border: '1px solid #fff',\n        borderWidth: '1px 1px 0 0',\n        textAlign: 'center',\n        color: `rgb(0, 0, 0, ${ratio / 2 + 0.4})`,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        flexGrow: square ? 0 : 1,\n        flexBasis: square ? height : 0,\n        flexShrink: 0,\n        height: height,\n        lineHeight: height,\n        borderRadius: '4px',\n        fontSize: '.8rem',\n        cursor: onClick ? 'pointer' : 'initial',\n        background: `rgb(12, 160, 44, ${ratio + 0.05})`,\n        ...style(posX, posY, ratio)\n      }}\n    >\n      {render(posX, posY, value)}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n}\n\nexport default function Row({ children, reverse = false }: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'row-reverse' : 'row'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  xLabelsStyle?: (index: number) => {}\n  square?: boolean\n  height: string\n}\n\nexport default function XLabels({\n  labels,\n  xLabelsStyle = () => ({}),\n  height,\n  square = false\n}: Props) {\n  const widthPercent = `${100 / labels.length}%`\n  return (\n    <div style={{ display: 'flex', textAlign: 'center' }}>\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            padding: '0.2rem 0',\n            boxSizing: 'border-box',\n            flexGrow: square ? 'initial' : 1,\n            overflow: 'hidden',\n            flexShrink: 1,\n            flexBasis: square ? height : widthPercent,\n            width: square ? height : widthPercent,\n            ...xLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n}\n\nexport default function Column({ children, reverse = false }: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'column-reverse' : 'column',\n        flexGrow: 1\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  height: string\n  reverse?: boolean\n  yLabelsStyle?: (index: number) => {}\n}\n\nexport default function YLabels({\n  labels,\n  height,\n  yLabelsStyle = () => ({}),\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: reverse ? 'left' : 'right'\n      }}\n    >\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            boxSizing: 'border-box',\n            padding: '0 0.2rem',\n            lineHeight: height,\n            ...yLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  xLabelHeight: number\n  isXLabelReverse: boolean\n  children: any\n}\n\nexport default function YLabelAligner({\n  xLabelHeight,\n  isXLabelReverse,\n  children\n}: Props) {\n  const style = {\n    [isXLabelReverse ? 'marginBottom' : 'marginTop']: `${xLabelHeight}px`\n  }\n  return <div style={style}>{children}</div>\n}\n","import * as React from 'react'\nimport Cell from './Cell'\nimport Row from './Row'\nimport XLabels from './XLabels'\nimport Column from './Column'\nimport YLabels from './YLabels'\nimport YLabelAligner from './YLabelAligner'\nimport useElemetHeight from './useElemetHeight'\n\ninterface Props {\n  data: number[][]\n  xLabels?: string[]\n  yLabels?: string[]\n  cellHeight?: string\n  square?: boolean\n  xLabelsPos?: 'top' | 'bottom'\n  yLabelsPos?: 'left' | 'right'\n  xLabelsStyle?: (index: number) => {}\n  yLabelsStyle?: (index: number) => {}\n  cellStyle?: (x: number, y: number, ratio: number) => {}\n  cellRender?: (x: number, y: number, value: number) => {}\n  onClick?: (x: number, y: number) => void\n}\n\nfunction getMinMax(data: number[][]): [number, number] {\n  const flatArray = data.reduce((i, o) => [...o, ...i], [])\n  const max = Math.max(...flatArray)\n  const min = Math.min(...flatArray)\n  return [min, max]\n}\n\nexport const HeatMapGrid = ({\n  data,\n  xLabels,\n  yLabels,\n  xLabelsPos = 'top',\n  yLabelsPos = 'left',\n  square = false,\n  cellHeight = '2px',\n  xLabelsStyle,\n  yLabelsStyle,\n  cellStyle,\n  cellRender,\n  onClick\n}: Props) => {\n  const [xLabelHeight, xLabelRef] = useElemetHeight(22)\n  const [min, max] = getMinMax(data)\n  const minMaxDiff = max - min\n  const isXLabelReverse = xLabelsPos === 'bottom'\n  const isYLabelReverse = yLabelsPos === 'right'\n\n  return (\n    <Row reverse={isYLabelReverse}>\n      {yLabels && (\n        <YLabelAligner\n          xLabelHeight={xLabelHeight}\n          isXLabelReverse={isXLabelReverse}\n        >\n          <YLabels\n            reverse={isYLabelReverse}\n            labels={yLabels}\n            height={cellHeight}\n            yLabelsStyle={yLabelsStyle}\n          />\n        </YLabelAligner>\n      )}\n      <Column reverse={isXLabelReverse}>\n        <div ref={xLabelRef}>\n          {xLabels && (\n            <XLabels\n              labels={xLabels}\n              xLabelsStyle={xLabelsStyle}\n              height={cellHeight}\n              square={square}\n            />\n          )}\n        </div>\n        <Column>\n          {data.map((rowItems, xi) => (\n            <Row key={xi}>\n              {rowItems.map((value, yi) => (\n                <Cell\n                  key={`${xi}-${yi}`}\n                  posX={xi}\n                  posY={yi}\n                  onClick={onClick}\n                  value={value}\n                  height={cellHeight}\n                  square={square}\n                  render={cellRender}\n                  style={cellStyle}\n                  ratio={(value - min) / minMaxDiff}\n                />\n              ))}\n            </Row>\n          ))}\n        </Column>\n      </Column>\n    </Row>\n  )\n}\n","import React from 'react'\n\ninterface ClientHeight {\n  clientHeight: number\n}\n\nexport default function useElemetHeight(\n  initHeight: number\n): [number, React.MutableRefObject<any>] {\n  const eleRef = React.useRef(null)\n  const [eleHeight, setEleHeight] = React.useState<number>(initHeight)\n\n  React.useEffect(() => {\n    if (eleRef.current) {\n      const height = ((eleRef.current || {}) as ClientHeight).clientHeight\n      setEleHeight(height)\n    }\n  }, [])\n\n  return [eleHeight, eleRef]\n}\n","import React from 'react'\nimport { HeatMapGrid } from 'react-grid-heatmap'\n\nconst xLabels = new Array(24).fill(0).map((_, i) => `${i}`)\nconst yLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri']\nconst data = new Array(yLabels.length)\n  .fill(0)\n  .map(() =>\n    new Array(xLabels.length)\n      .fill(0)\n      .map(() => Math.floor(Math.random() * 50 + 50))\n  )\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        width: '100%'\n      }}\n    >\n      <HeatMapGrid\n        data={data}\n        xLabels={xLabels}\n        yLabels={yLabels}\n        // Reder cell with tooltip\n        cellRender={(x, y, value) => (\n          <div title={`Pos(${x}, ${y}) = ${value}`}>{value}</div>\n        )}\n        xLabelsStyle={(index) => ({\n          color: index % 2 ? 'transparent' : '#777',\n          fontSize: '.8rem'\n        })}\n        yLabelsStyle={() => ({\n          fontSize: '.7rem',\n          textTransform: 'uppercase',\n          color: '#777'\n        })}\n        cellStyle={(_x, _y, ratio) => ({\n          background: `rgb(12, 160, 44, ${ratio})`,\n          fontSize: '.8rem',\n          color: `rgb(0, 0, 0, ${ratio / 2 + 0.4})`\n        })}\n        cellHeight='2rem'\n        xLabelsPos='bottom'\n        onClick={(x, y) => alert(`Clicked (${x}, ${y})`)}\n        yLabelsPos='right'\n        square\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}